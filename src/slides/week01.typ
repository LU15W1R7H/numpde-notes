#import "setup.typ": *
#show: this-template

#titleslide

#pagebreak()

#let pathemph(a, b) = [
  #text(fill: white.darken(60%))[#a]#b
]

= Important links
#v(1cm)

NPDE Repo https://gitlab.math.ethz.ch/ralfh/NPDERepo \
CPP reference: https://en.cppreference.com/ \
Eigen documentation https://eigen.tuxfamily.org \
LehrFEM++ docs https://craffael.github.io/lehrfempp/ \
( LehrFEM++ repo https://github.com/craffael/LehrFEMpp ) \

#pagebreak()
= Setup / Problem 0-1
#v(1cm)

Clone the NumPDE repository from the D-MATH GitLab.
```sh
git clone git@gitlab.math.ethz.ch:ralfh/NPDERepo.git
```

Run CMake.
```sh
cd NPDERepo
mkdir build
cmake -B build
```

#v(1cm)
...This will take a while, because the hunter package manager
now fetches all dependencies (LehrFEM++, boost, GoogleTest, etc.)
and builds them.

In the meantime...

#pagebreak()
== Structure of NPDERepo: Source Code
#v(1cm)

We basically only care about the #pathemph(`NPDERepo/`, `homework`) folder. \
This is where we find the source code for all code problems.

In each specific problem folder, there are these directories
- #pathemph(`NPDERepo/homework/`, `<problem>/template`)
- #pathemph(`NPDERepo/homework/`, `<problem>/mysolution`)
- #pathemph(`NPDERepo/homework/`, `<problem>/mastersolution`)

Only modify `mysolution`, nothing else.


#pagebreak()
== Structure of NPDERepo: Build Folder
#v(0.3cm)

For compiling and executing we use the #pathemph(`NPDERepo/`, `build`) folder.

There we also find a #pathemph(`NPDERepo/build/`, `homework`) folder, which
mirrors the structure of the source code homework folder.

Inside we can compile a specific problem. \
e.g.
- ```sh make DebuggingWithGDB_mastersolution```
- ```sh make DebuggingWithGDB_mysolution```
- ```sh make DebuggingWithGDB_test_mysolution```

The executables are then found in the corresponding problem build folder. \
e.g.
- #pathemph(`NPDERepo/build/homework/`, `DebuggingWithGDB/DebuggingWithGDB_mastersolution`)
- #pathemph(`NPDERepo/build/homework/`, `DebuggingWithGDB/DebuggingWithGDB_mysolution`)
- #pathemph(`NPDERepo/build/homework/`, `DebuggingWithGDB/DebuggingWithGDB_test_mysolution`)

#pagebreak()
== VSCode setup
#v(1cm)

Extensions needed
- C++
- clangd
- CMake
- CMake Tools
- CodeLLDB

#v(1cm)

Let's edit the .gitignore.
We should ignore the cache files generated by clangd and others. \
Add this line
```
.cache/
```

#pagebreak()
== SSH setup
#v(1cm)

Generate SSH key and add it to the SSH agent.
```
ssh-keygen -t ed25519 -C "your_email@example.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
```

#v(0.5cm)
Add #emph[public] key to GitHub and/or #link("gitlab.ethz.ch").


#pagebreak()
== Forking repository (manually)
#v(1cm)

Create new repository under #link("gitlab.ethz.ch/<nethz>/NPDERepo").

Setup original repository as `upstream` and your fork as `origin`.
```sh
git remote -m origin upstream
git remote add origin git@gitlab.ethz.ch:<nethz>/NPDERepo.git
git push --set-upstream origin
```

#pagebreak()
== Using your fork
#v(1cm)

Create and switch to your own branch.
```sh
git switch -c <nethz>
```

Only commit on your own branch.
Do not modify master branch.

If there's a change on the original repository, then
Bring you branch up-to-date with upstream.

```sh
git stash
git switch master
git fetch upstream
git rebase upstream/master
git switch <nethz>
git rebase master
git stash apply
```
